Urgents:

1) Design parameter-props...
2) Test as many families as possible by creating example pipelines.
3) Realize predictive maintenance use-case.
4) Documentation/guides (both in turkish and english)
5) Unit tests
6) UI

Core requirements:

1) Design parameter-props structure so that UI can infer which parameters to ask from user and how to validate them.
   - Primitive parameters
   - Nested parameters
   - Array parameters (can include nested parameters as well)

   - Also consider:
     -> Conditional/Alternative parameter choices
        ->> May or may not produce model
        ->> Requires int or array (if user selects array, you need to keep an addition info of what types this array may hold...)

2) Improve validations
   - Add connection checks
   - Add parameter constraint checks

3) Check stream compatibility and output modes for families/nodes.

4) Handle windows both for batch and stream dataframes.

5) Handle watermarking

6) Represent family incompatibilities as a config, remove this from node-specs.
   - Check whether there is any node behaving differenly than its family~

7) Re-consider df/sql operation design...

Simple additions/checks:
1) Add Kafka related imports (and check others)
2) Check pipeline behavior/output when there are transformers only.
3) Consider adding offset option for kafka integration.
4) Maybe add an indicator to node-spec/family to show whether you need to create dataframe from a scalar output produced by the node (e.g. score produced by evaluators).
5) Handle escape characters